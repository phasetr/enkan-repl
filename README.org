* claudemacs-repl

[[https://github.com/phasetr/claudemacs-repl/workflows/CI/badge.svg]]
[[https://img.shields.io/badge/License-MIT-yellow.svg]]

This package builds upon the excellent work of:
- [[https://github.com/akib/emacs-eat][eat]] - Terminal emulator inside Emacs
- [[https://github.com/cpoile/claudemacs][claudemacs]] - Claude AI integration for Emacs

We extend our deepest gratitude to the authors and contributors of these foundational packages.

#+OPTIONS: toc:2

** Vision - Reviving REPL Culture for the AI Era
This package differs technically from traditional REPLs (Read-Eval-Print Loop).
While conventional REPLs execute code and return results,
=claudemacs-repl= sends text to Claude AI and receives generated responses.

However, we view this difference not as a constraint,
but as a new possibility.
Our dream is to revive the interactive development culture that LISP, Elisp,
and Emacs have nurtured for decades,
in a form befitting the AI era.

Send your thoughts with =send-region=,
receive Claude's response,
and deepen your thinking further.
This cycle is the development experience that the new era's REPL envisions.
Here lies a completely new programming horizon woven by Emacs and AI.

** Future Direction and Breaking Changes Notice

This package is currently built on Claude Code due to the overwhelmingly superior experience it provides within my current usage scope.
However, if superior services emerge that surpass Claude Code through future technological and service developments, I intend to migrate to those alternatives.
Ideally, I would like to enable switching between or combining multiple services.
(In fact, I judge Claude Code's search capabilities to be insufficient,
which is why I frequently instruct to "consult Gemini with =gemini -p= for research.")
Parts that are tightly coupled to Claude Code represent critical weaknesses.
Therefore, please be aware that breaking changes, including package name changes, may be introduced.

This package also serves as my personal research tool for exploring challenges on the path to achieving that goal.

** Motivation
The development motivation stems from the current usability issues with Claude Code and Gemini CLI,
particularly the difficulty of text input and the non-persistent nature of personal input history.
While file-based input is somewhat possible,
it's extremely cumbersome to use.

In terminals,
input and copy-paste operations are difficult,
making revisions troublesome.
Furthermore, when something comes to mind during AI work,
you need to leave the terminal to take notes,
creating an extremely unpleasant development experience.

Additionally, when security constraints are enforced to prevent dangerous command execution,
you're frequently prompted for permission approvals.
Constantly switching to the terminal for these confirmations becomes highly tedious.
Even when stopping runaway processes, you must navigate to the terminal and press Esc.

I constantly wished for the ability to easily take notes in text files
and send only the necessary parts as commands to AI,
keeping inspired thoughts noted for immediate use after AI work is complete.
For text work, I naturally turned to Emacs.
After trying several packages that didn't quite fit,
I decided to build my own on top of [[https://github.com/cpoile/claudemacs][claudemacs]].

This package enables you to send numbered choices directly from your input file
using functions like =M-x claudemacs-repl-send-1/2/3=.
To stop runaway processes, use =M-x claudemacs-repl-send-escape= from your input file -
no terminal navigation required.
(Note: We provide no default keybindings, so you may prefer mapping these to keys like =C-g=
or configure them according to your preferences.)

** Design Philosophy

*** Org-mode Only Choice
This package exclusively uses Org-mode for input files,
leveraging Emacs's native compatibility and structured document capabilities.
Rather than supporting multiple formats like Markdown,
we focus on what works best within the Emacs ecosystem.

*** No Default Keybindings
We intentionally provide no default keybindings for several reasons:
- Org-mode itself already has a vast number of features and keybindings
- Serious Emacs users (especially those who don't "cheat" with VSCode)
  may have their own customization patterns
- Avoiding conflicts with existing user workflows

Even if your Emacs configuration is heavily customized with no available keybindings,
the interactive cheatsheet (=M-x claudemacs-repl-cheatsheet=) provides quick access
to all functions with fuzzy search and filtering capabilities.

*** =M-x= Driven Workflow with Interactive Cheatsheet
As the author's personal approach, we introduce a "partial keybinding abandonment + cheatsheet strategy."
Since there's little potential harm, we assigned direct org-mode keys for numbers and Esc as buffer-local variables.
We also bound the central sending command =send-region= to a key, also as a buffer-local variable.
For everything else, we abandoned keybinding configurations since they're rarely used.

Instead, we added a cheatsheet feature to quickly access only the commands you need.
You can filter by keywords directly related to the operation you want to perform.
For infrequently used operations, this overhead is perfectly acceptable.
At least for me.

You could assign a keybinding to the cheatsheet itself, but I can't remember them.
My memory/configuration approach doesn't align well with this - 
I get confused thinking "is it 'c' for cheatsheet? or 's' for sheet? 
wait, did I use 'open' somewhere, so 'o'?" even though 'open' isn't even in the actual command name.

Furthermore, once you decide on settings, you want to reuse them to some extent.
To make this easy, we made it possible to specify your own default configuration file.
We also added =claudemacs-repl-output-template= to output your custom configuration file
to a temporary buffer, making it as easy as possible to reconfigure multiple files.

The interactive cheatsheet (=M-x claudemacs-repl-cheatsheet=) makes this workflow
even more practical by providing:
- *Command Palette*: Quick access to all functions with descriptions
- *Fuzzy Search*: Type partial names to find functions instantly
- *Categorized Organization*: Functions grouped by purpose (Text Sender, Session Controller, Utilities)
- *No Memorization Required*: Browse available functions without remembering exact names

During Claude development work,
frequently used functions naturally appear at the top of completion lists,
and the cheatsheet ensures you never miss useful functionality.

** Installation

*** Prerequisites
- Emacs 28.1 or later
- [[https://github.com/cpoile/claudemacs][claudemacs]] package installed and configured
- [[https://github.com/anthropics/claude-code][Claude Code CLI]] properly set up

*Note*: This package has been developed and tested exclusively on macOS with GNU Emacs 30.1.
While it should work on other platforms and Emacs versions (28.1+),
compatibility with other environments has not been verified.

*** Using straight.el (Recommended)
#+begin_src elisp
(straight-use-package
  '(claudemacs-repl :host github :repo "phasetr/claudemacs-repl"))
#+end_src

*** Manual Installation
1. Download =claudemacs-repl.el=
2. Add to your Emacs configuration:

#+begin_src elisp
;; Add to load path
(add-to-list 'load-path "/path/to/claudemacs-repl")

;; Load the package
(require 'claudemacs-repl)
#+end_src

** Quick Start

*** For New Projects (Recommended)

1. *Create a dedicated project directory*:
   #+begin_src bash
   mkdir my-claude-project
   cd my-claude-project
   #+end_src

2. *Initialize Git repository*:
   #+begin_src bash
   git init
   #+end_src
   /This ensures Claude sessions are isolated and changes are tracked safely./

3. *Open project file*: =M-x claudemacs-repl-open-project-input-file=
4. *Start Claude session*: =M-x claudemacs-repl-start-claudemacs=
5. *Write your thoughts* in the org-mode file
6. *Access functions easily*: Use =M-x claudemacs-repl-cheatsheet= to browse and select functions
7. *Send specific parts* using =M-x claudemacs-repl-send-region= or =M-x claudemacs-repl-send-rest-of-buffer=

*** For Existing Projects

*Important*: claude (or claudemacs) automatically detects Git repositories or something and may start sessions in parent directories: see [[https://github.com/cpoile/claudemacs?tab=readme-ov-file#workspace-and-project-aware-sessions][the usage section for claudemacs]].

To ensure predictable behavior:
- Work within properly initialized Git repositories (=git init=)
- Or use dedicated project directories as shown above

The generated project file includes template functions and usage instructions.

** Core Functions

*** Command Palette
- =claudemacs-repl-cheatsheet= - *Interactive command browser with fuzzy search*
  - Browse all available functions with descriptions
  - Filter functions by typing partial names
  - Functions organized by category for easy discovery
  - No need to memorize function names

*** File Management
- =claudemacs-repl-open-project-input-file= - Create/open persistent input file for current directory

*** Text Sending
- =claudemacs-repl-send-region= - Send selected text (the author most commonly used)
- =claudemacs-repl-send-rest-of-buffer= - Send from cursor to end
- =claudemacs-repl-send-buffer= - Send entire buffer
- =claudemacs-repl-send-line= - Send current line only

*** Session Control
- =claudemacs-repl-send-enter= - Send enter key
- =claudemacs-repl-send-1/2/3= - Send numbered choices for AI prompts

*** Utilities
- =claudemacs-repl-start-claudemacs= - Start Claude session in appropriate directory
- =claudemacs-repl-setup-window-layout= - Arrange windows for (the author's) optimal workflow
- =claudemacs-repl-status= - Display connection status and diagnostics

** Configuration

*** Template Customization
#+begin_src elisp
;; Use default template
(setq claudemacs-repl-template-file nil)

;; Use custom template file
(setq claudemacs-repl-template-file "~/my-claude-template.org")

;; Use project-specific template
(setq claudemacs-repl-template-file (expand-file-name "claude-template.org" user-emacs-directory))
#+end_src

To create a custom template,
use =M-x claudemacs-repl-output-template= to export the default template to a buffer for editing.

** Troubleshooting
If you encounter "❌ Cannot send - no matching claudemacs buffer found for this directory":

1. Ensure claudemacs is running: =M-x claudemacs-transient-menu=
2. Verify Claude Code CLI is properly configured
3. Run =M-x claudemacs-repl-status= for detailed diagnostic information
4. Check that you're in the correct directory or using the appropriate project file

For debug information, enable debug mode with =M-x claudemacs-repl-toggle-debug-mode=.

** Development

*** Running Tests
#+begin_src bash
make check
#+end_src

This runs the all test suite including linting,
byte compilation,
and documentation checks.

** Releases
This project uses automated releases via [[https://semantic-release.gitbook.io/][semantic-release]]. New versions are automatically published to GitHub Releases and a [[file:CHANGELOG.md][CHANGELOG.md]] is generated based on Conventional Commits. You can find detailed release notes in the CHANGELOG.

*Note*: The `semantic-release` toolchain is used for development/release automation only. The Elisp package itself has no Node.js runtime dependencies and can be installed normally via MELPA.

** Contributing
We welcome various issues and pull requests.
However, please understand that due to leukemia recurrence in June 2024 and ongoing treatment,
response times may be affected.

Ironically,
it was precisely this situation that motivated the development of this package - to continue enjoying programming even under these circumstances.
The desire to maintain productive development workflows during challenging times
drove the creation of claudemacs-repl.

While I have extensively used OSS over the years,
I never imagined I would find myself on the OSS development side under these circumstances.
I have received almost no pull requests for repositories published on GitHub,
please bear with me as responses may take longer than usual while I learn the process.

*Note*: I wanted to automate version updates like semver as much as possible,
so I had Claude Code (and Gemini) automate it,
and it recommended using Node.js mechanisms,
which I have adopted.
I'm not sure if this is the right approach,
but I'll run with it for now.

** License
This project is licensed under the MIT License - see the [[file:LICENSE][LICENSE]] file for details.

** Support

- 🐛 [[https://github.com/phasetr/claudemacs-repl/issues][Issue Tracker]]
- 💬 [[https://github.com/phasetr/claudemacs-repl/discussions][Discussions]]
