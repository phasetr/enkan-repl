;;; generate-constants.el --- Generate constants for enkan-repl -*- lexical-binding: t -*-

;; Copyright (C) 2025 [phasetr]

;; Author: [phasetr] <phasetr@gmail.com>
;; Keywords: tools

;; This file is not part of GNU Emacs.

;;; Commentary:

;; This script generates precompiled constants for enkan-repl cheat-sheet
;; functionality to improve performance by avoiding runtime file I/O.

;;; Code:

(require 'cl-lib)

;; Add parent directory to load path
(let ((project-root (file-name-directory (directory-file-name (file-name-directory (or load-file-name buffer-file-name))))))
  (add-to-list 'load-path project-root))

(require 'enkan-repl-utils)

(defun generate-cheat-sheet-constants ()
  "Generate cheat-sheet constants file with precompiled function lists."
  (let* ((enkan-repl-file (expand-file-name "enkan-repl.el"))
         (output-file (expand-file-name "enkan-repl-constants.el"))
         (functions-info (enkan-repl-utils--extract-function-info enkan-repl-file))
         (interactive-functions (cl-remove-if-not
                                (lambda (f) (plist-get f :interactive))
                                functions-info))
         (candidates (mapcar (lambda (func)
                              (cons (plist-get func :name)
                                    (or (plist-get func :docstring) "No description")))
                            interactive-functions)))
    
    (with-temp-file output-file
      (insert ";;; enkan-repl-constants.el --- Precompiled constants for enkan-repl -*- lexical-binding: t -*-\n\n")
      (insert ";; This file is automatically generated by scripts/generate-constants.el\n")
      (insert ";; DO NOT EDIT MANUALLY\n\n")
      (insert ";;; Commentary:\n\n")
      (insert ";; Precompiled constants for cheat-sheet functionality to improve performance\n")
      (insert ";; by avoiding runtime file I/O and parsing.\n\n")
      (insert ";;; Code:\n\n")
      
      ;; Generate the constants
      (insert "(defconst enkan-repl-cheat-sheet-candidates\n")
      (insert "  '(")
      (let ((first t))
        (dolist (candidate candidates)
          (unless first (insert "\n    "))
          (setq first nil)
          (insert (format "(%S . %S)" (car candidate) (cdr candidate)))))
      (insert ")\n")
      (insert "  \"Precompiled list of cheat-sheet candidates.\n")
      (insert "Each element is a cons cell (FUNCTION-NAME . DESCRIPTION).\")\n\n")
      
      ;; Generate metadata
      (insert (format "(defconst enkan-repl-cheat-sheet-function-count\n"))
      (insert (format "  %d\n" (length candidates)))
      (insert "  \"Number of functions in cheat-sheet.\")\n\n")
      
      (insert "(provide 'enkan-repl-constants)\n\n")
      (insert ";;; enkan-repl-constants.el ends here\n"))
    
    (message "Generated constants file: %s" output-file)
    (message "Function count: %d" (length candidates))
    output-file))

;; When running as script
(when (and (boundp 'command-line-args-left) command-line-args-left)
  (generate-cheat-sheet-constants))

(provide 'generate-constants)

;;; generate-constants.el ends here